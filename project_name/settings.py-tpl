# -*- coding: utf-8 -*-

"""
Django settings for {{ project_name }} project.

Generated by 'django-admin startproject' using Django {{ django_version }}.
Custom template ver.2.0a1
"""

import os
import platform
import warnings
#from django.utils.translation import ugettext_lazy as _
from django import get_version as django_version
from . import __version__

import cbs
#from redis import StrictRedis


cbs.DEFAULT_ENV_PREFIX = 'DJ_{{ project_name|upper }}_'

class BaseSettings(object):
    DEBUG = True
    PROJECT_VERSION = __version__
    DJANGO_VERSION = django_version()
    # SECURITY WARNING: keep the secret key used in production secret!
    @cbs.env
    def SECRET_KEY(self):
        '''Gets its value from os.environ['DJANGO_SECRET_KEY']'''
        print('!!! ENV KEY probably failed, will use dummy')
        return '{{ secret_key }}'

    @cbs.env
    def PG_PWD(self):
        warnings.warn("PG_PWD variable is not available!")
        return ''

    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

    INTERNAL_IPS = ['127.0.0.1', '192.168.2.1', '192.168.2.49']
    ALLOWED_HOSTS = []
    INSTALLED_APPS = [
        'kern',  # Kern for German core/kernel, main project app
        'celestia',
        'django.contrib.admin',
        'django.contrib.auth',
        'django.contrib.contenttypes',
        'django.contrib.sessions',
        'django.contrib.messages',
        'django.contrib.sites',  # needed for sitemap framework
        'debug_toolbar',
        'django.contrib.staticfiles',]

    SITE_ID = 1

    MIDDLEWARE = [
        'django.middleware.security.SecurityMiddleware',
        'django.contrib.sessions.middleware.SessionMiddleware',
        #'debug_toolbar.middleware.DebugToolbarMiddleware',
        'django.middleware.common.CommonMiddleware',
        'django.middleware.csrf.CsrfViewMiddleware',
        'django.contrib.auth.middleware.AuthenticationMiddleware',
        'django.contrib.messages.middleware.MessageMiddleware',
        'django.middleware.clickjacking.XFrameOptionsMiddleware',]

    STYLES_APP = 'kern'
    CELESTIA_STATIC_APPS = ('kern',)

    MAIN_STYLE_FILENAME = 'main'

    """
    CACHES = {
        "default": {"BACKEND": "django_redis.cache.RedisCache",
                    "LOCATION": "redis://127.0.0.1:{port}/{db}".format(port=6379, db=REDIS_DB_DICT['cache']),
                    "KEY_PREFIX": "_{{project_name}}_",
                    "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient",}}  }

    SESSION_ENGINE = "django.contrib.sessions.backends.cached_db"
    """

    SETTING_CONTEXT_NAMES = (
        'PROJECT_VERSION',
        'DEBUG',
        'FONTAWESOME_CDN',
        'FONTAWESOME_JS_CDN',
        'CONTACT_ADDRESS',
        'JQUERY_CDN')

    AUTH_USER_MODEL = 'kern.User'
    LOGIN_URL = '/auth/login/'
    LOGIN_REDIRECT_URL = '/'


    HOST_CODENAME = '{{ project_name }}'

    ROOT_URLCONF = '{{ project_name }}.urls'

    TEMPLATES = [
        {
            'BACKEND': 'django.template.backends.django.DjangoTemplates',
            'DIRS': [],
            'APP_DIRS': True,
            'OPTIONS': {
                'context_processors': [
                    'django.template.context_processors.debug',
                    'django.template.context_processors.request',
                    'django.contrib.auth.context_processors.auth',
                    'django.contrib.messages.context_processors.messages',
                    'celestia.context_processors.setting', 
                ],
            },
        },]

    WSGI_APPLICATION = '{{ project_name }}.wsgi.application'

    AUTH_PASSWORD_VALIDATORS = [
        { 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', },
        { 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', },
        { 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', },
        { 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', }, ]


    WEB_ROOT = "/Setsuna/web/{{ project_name }}/"
    @property
    def STATIC_ROOT(self):
        return os.path.join(self.WEB_ROOT, 'static/')

    @property
    def MEDIA_ROOT(self):
        return os.path.join(self.WEB_ROOT, 'media/')

    STATIC_URL = '/static/'

    FONTAWESOME_CDN = (
        "https://use.fontawesome.com/releases/v5.1.0/css/all.css",
        "sha384-lKuwvrZot6UHsBSfcMvOkWwlCMgc0TaWr+30HWe3a4ltaBwTZhyTEggF5tJv8tbt"   )
    FONTAWESOME_JS_CDN = (
        "https://use.fontawesome.com/releases/v5.1.0/js/all.js",
        "sha384-3LK/3kTpDE/Pkp8gTNp2gR/2gOiwQ6QaO7Td0zV76UFJVhqLl4Vl3KL1We6q6wR9"   )
    JQUERY_CDN = "//code.jquery.com/jquery-2.2.4.min.js"
    JQUERY_HASH = "sha256-BbhdlvQf/xTY9gja0Dq3HiwQF8LaCRTXxZKRutelT44="

    TIME_ZONE = 'Europe/Moscow'
    USE_I18N = True
    USE_L10N = True
    USE_TZ = True
    LANGUAGE_CODE = 'ru-RU'
    #LOCALE_PATHS = [os.path.join(BASE_DIR, 'locale'),]
    #LANGUAGES = [('en', _('English')),
    #             ('ru', _('Russian')),]

class DevSettings(BaseSettings):

    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    DATABASES = {
        'default':
        {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }       }

    WEB_ROOT = "/Setsuna/web/{{ project_name }}/"


class ProdSettings(BaseSettings):
    # DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
    ALLOWED_HOSTS = ['test0.doratoa.net',] # WARNING fill in hosts
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    DEBUG = False
    @property
    def DATABASES(self):
        DBS = {
            'default':
                {'ENGINE': 'django.db.backends.postgresql','NAME': 'anglichanka',
                'USER': 'acp_2302v2', 'PASSWORD': self.PG_PWD,
                'HOST': '127.0.0.1', 'PORT': '5432'}, }
        return DBS

    WEB_ROOT = "/srv/web/{{ project_name }}/"


# Apply CBS
MODE = os.environ.get('DJANGO_MODE', 'Dev')
SETTINGS_CLASS = '{0}Settings'.format(MODE.title())
cbs.apply(SETTINGS_CLASS, globals())

_msg = "{prj_name} v.{prj_ver} on python {py_ver} [{settings}] DEBUG={debug}"
_msg = _msg.format(prj_name = "{{ project_name }}".title(), 
                   prj_ver = PROJECT_VERSION, 
                   py_ver = platform.python_version(),
                   settings = SETTINGS_CLASS,
                   debug=DEBUG)
print(_msg)

